@using ScoutsHonour.Enums;
@using ScoutsHonour.Models;
@model ScoutsHonour.Models.MemberGoalsSummaryViewModel

@{
    ViewBag.Title = "Cornerstone";
}

<h2>Cornerstone Badges: @Model.FullName</h2>

@using (Html.BeginForm())
{
    <div class="badge-header clearfix">
        <div class="badge-right-header">
            <div class="badge-goal">@Html.DisplayNameFor(model => model.BronzeBadge)</div>
            <div class="badge-goal">@Html.DisplayNameFor(model => model.SilverBadge)</div>
            <div class="badge-goal">@Html.DisplayNameFor(model => model.GoldBadge)</div>
        </div>
        <div class="badge-left-header">Badge Section</div>
    </div>
    <div class="ui-accordion">
        @{int i = 0;}
        @{bool parentCountMany = false;}
        @{BadgePartViewModel badgePart;}
        @{string[] badgePartTitle = new string[2];}
        @foreach (var item in ViewBag.Goals)
        {
            i++;
            if (item.TopLevel)
            {
                parentCountMany = (item.CountType == GoalCountType.Many);
                if (i != 1)
                {
                    @Html.Raw("</div>")
                }
                <div class="badge-section clearfix">
                    <div class="badge-right-section">
                        <div class="badge-goal @(Model.BronzeBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Complete ? "badge-complete" : "")">
                            @(Model.BronzeBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Achieved)/@(Model.BronzeBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Target)
                        </div>
                        <div class="badge-goal @(Model.SilverBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Complete ? "badge-complete" : "")">
                            @(Model.SilverBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Achieved)/@(Model.SilverBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Target)
                        </div>
                        <div class="badge-goal @(Model.GoldBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Complete ? "badge-complete" : "")">
                            @(Model.GoldBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Achieved)/@(Model.GoldBadge.BadgeSections.Where(bs => bs.GoalId == item.Id).FirstOrDefault().Target)
                        </div>
                    </div>
                    <div class="badge-left-section">
                        @{badgePartTitle = item.Title.Split('-');}
                        @badgePartTitle[0].Trim()<br />
                        <strong>@badgePartTitle[1].Trim()</strong>
                    </div>
                </div>
                @Html.Raw("<div>")
            }
            else
            {
                <div class="badge-part clearfix">
                    <div class="badge-right-part">
                        @{badgePart = Model.BadgeSections.Where(cb => cb.GoalId == item.Id).FirstOrDefault();}
                        @if (badgePart.GoalLinkType == GoalLinkType.Event)
                        {
                            if (badgePart.CompleteDate.HasValue)
                            {
                                <text>@badgePart.CompleteDate.Value.ToShortDateString()</text>
                            }
                            else
                            {
                                <text>Yes</text>
                            }
                        }
                        else
                        {
                            if (User.IsInRole(Role.Parent.ToString()))
                            {
                                <div>@((badgePart != null && badgePart.GoalLinkType == GoalLinkType.Member) ? "Yes" : "")</div>
                            }
                            else
                            {
                                if (parentCountMany) {
                                    <span title="Attend events to complete this activity">...</span>
                                }
                                else
                                {
                                    <div class="onoffswitch clearfix">
                                        <input type="checkbox" name="goals" class="onoffswitch-checkbox" id="goal-@item.Id" value="@item.Id" @((badgePart != null && badgePart.GoalLinkType == GoalLinkType.Member) ? "checked" : "")>
                                        <label class="onoffswitch-label" for="goal-@item.Id">
                                            <span class="onoffswitch-inner"></span>
                                            <span class="onoffswitch-switch"></span>
                                        </label>
                                    </div>
                                }
                            }
                        }
                    </div>
                    <div class="badge-left-part"> <i class="fa-@(item.RequirementLevel.ToString().ToLower()) fa fa-question-circle" title="@(item.RequirementLevel.ToString()): @item.Description"></i> @item.Title </div>
                </div>
            }
        }
        @Html.Raw("</div>")
    </div>
    if (!User.IsInRole(Role.Parent.ToString())) {
        <div>
            <button type="submit" class="pure-button pure-button-primary">Save</button>
            <a href="@Url.Action("Cornerstone")" class="pure-button">Cancel</a>
        </div>
    }
    <br />
}
